// generated by `build.rs`

use crate::choice_parameters::CharacterChoices::*;

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("Reimoo"))]
pub async fn reimu(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Reimu, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command)]
pub async fn marisa(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Marisa, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command)]
pub async fn ichirin(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Ichirin, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("byak", "hijiri"))]
pub async fn byakuren(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Byakuren, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command)]
pub async fn futo(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Futo, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("miku"))]
pub async fn miko(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Miko, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command)]
pub async fn nitori(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Nitori, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("koi"))]
pub async fn koishi(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Koishi, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("mami"))]
pub async fn mamizou(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Mamizou, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("koko"))]
pub async fn kokoro(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Kokoro, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command)]
pub async fn kasen(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Kasen, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("moko"))]
pub async fn mokou(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Mokou, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("shinmyoumaru", "shimmy", "shimy", "sinmyoumaru"))]
pub async fn sukuna(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Sukuna, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("sumi", "usami", "susami"))]
pub async fn sumireko(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Sumireko, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("udonge"))]
pub async fn reisen(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Reisen, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("santa", "smug"))]
pub async fn doremy(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Doremy, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("tenko"))]
pub async fn tenshi(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Tenshi, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("bestthcharacterdont@me"))]
pub async fn yukari(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Yukari, input).await
}

#[rustfmt::skip]
#[poise::command(prefix_command, aliases("jo'on", "jyoon", "june", "john"))]
pub async fn joon(
	ctx: crate::Context<'_>,
	#[description = "Move you want to query"] input: String,
) -> Result<(), crate::Error> {
	crate::commands::query::query_inner(ctx, Joon, input).await
}
