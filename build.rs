// generated by `sqlx migrate build-script`
fn main() {
	write_choices();

	// trigger recompilation when a new migration is added
	println!("cargo:rerun-if-changed=migrations");
}

include!("./src/choices.rs");
use choices::*;

/// Writes out the src/choice_parameters.rs file that includes the
/// poise::ChoiceParameter options for both the characters and wiki.
///
/// You can argue that this is worse than it was before.
fn write_choices() {
	let dest = std::path::Path::new("./src").join("choice_parameters.rs");

	let mut result = String::new();
	result += "// generated by `build.rs`\n\n";

	// CHARACTER OPTIONS
	result += "#[rustfmt::skip]\n#[derive(poise::ChoiceParameter)]\npub enum CharacterChoices {\n";
	for c in CHARACTER_CHOICES {
		if !c.full_name.is_empty() {
			result += &format!("	#[name = \"{}\"]\n", c.full_name);
		}
		for a in c.aliases {
			result += &format!("	#[name = \"{}\"]\n", a);
		}
		result += &format!("	#[name = \"{}\"]\n", c.name);
		result += &format!("	{},\n", c.name);
	}
	result += "}\n\n";

	// WIKI OPTIONS
	result += "#[rustfmt::skip]\n#[derive(poise::ChoiceParameter)]\npub enum WikiChoices {\n";
	for c in WIKI_CHOICES {
		if !c.full_name.is_empty() {
			result += &format!("	#[name = \"{}\"]\n", c.full_name);
		}
		for a in c.aliases {
			result += &format!("	#[name = \"{}\"]\n", a);
		}
		result += &format!("	#[name = \"{}\"]\n", c.name);
		result += &format!("	{},\n", c.name);
	}
	result += "}\n\n";

	std::fs::write(dest, result).unwrap();
	println!("cargo:rerun-if-changed=choices.rs");
}
